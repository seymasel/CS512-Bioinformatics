# -*- coding: utf-8 -*-
"""HW1_NurverSeyma_Sel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IQI083ZZH_IbL9nZRqK0zwGeU6snzpTl

CS512 HW1 Nurver Seyma Sel -27927

> COLAB LINK:https://colab.research.google.com/drive/1IQI083ZZH_IbL9nZRqK0zwGeU6snzpTl?usp=sharing
"""

#FrequentWordsProblem
def FrequentWords(genome, k):
    counts = {}
    num_iteration = len(genome) - k + 1
    for i in range(num_iteration):
        kmer = genome[i:i+k]
        if kmer in counts:
            counts[kmer] =+1
        else:
         counts[kmer] = 0
    maxval = max(counts.values()) #find maximum value
    maxkeys = [k for k, val in counts.items() if val == maxval] 
    return maxkeys

genome = input("Enter DNA string: ")
k = int(input("Enter k value: "))
FrequentWords(genome, k)

#ReverseComplementProblem
def DNACheck(DNA):
  seq = DNA.upper()
  valid = 'ACTG'
  return all(i in valid for i in seq)

def ReverseComplement(DNA):
 reverseDNA=''.join(reversed(DNA))
 index = len(reverseDNA)
 complementDNA=[]
 i=0
 while(i!=index):
     if(reverseDNA[i]=="A"):
       complementDNA.append("T")
     elif(reverseDNA[i]=="T"):
       complementDNA.append("A")
     elif(reverseDNA[i]=="G"):
       complementDNA.append("C")
     elif(reverseDNA[i]=="C"):
       complementDNA.append("G")
     elif(reverseDNA[i]=="a"):
       complementDNA.append("t")
     elif(reverseDNA[i]=="t"):
       complementDNA.append("a")
     elif(reverseDNA[i]=="g"):
       complementDNA.append("c")
     elif(reverseDNA[i]=="c"):
       complementDNA.append("g")
     i=i+1
 print(''.join(complementDNA)) #to convert one single string  

DNA = input("Enter DNA string: ")
if(DNACheck(DNA)==True): 
  ReverseComplement(DNA)
while(DNACheck(DNA)==False):
  print("Wrong form of DNA!")
  DNA = input("Please enter DNA string again: ")
  if(DNACheck(DNA)==True): 
   ReverseComplement(DNA)

#PatternMatchingProblem
def PatternMatching(pattern, genome):
  positions=[]
  num_iteration = len(genome) - len(pattern) + 1
  for i in range(num_iteration):
    if pattern == genome[i:i+len(pattern)]:
      positions.append(i)
  return positions

genome = input("Enter Genome string: ")
pattern = input("Enter Pattern string: ")
PatternMatching(pattern, genome)

#ClumpFindingProblem
def AllFrequentWords(genome, k, L, t):
  first_num_iter = len(genome) - L + 1 
  second_num_iter = L - k + 1
  freqMap = {}
  for i in range(first_num_iter):
    window = genome[i:i+L]
    for j in range(second_num_iter):
      kmer = window[j:j+k]
      if kmer in freqMap:
        freqMap[kmer] += 1 
      else:
       freqMap[kmer] = 1  
    return freqMap  

def Result(freqMap):
  frequent = {}
  for k in freqMap:
    if freqMap[k] >= t:
      frequent[k] = freqMap[k]
      answer = frequent.keys()
      output = ' '.join(answer)
  print(output)

genome = input("Please enter the genomic sequence: ")
k = int(input("Please enter length k of each kmer: "))
L = int(input("Please enter the length of clump L: "))
t = int(input("Please enter the minimum times t: "))
map = AllFrequentWords(genome, k, L, t)
#print(map)
Result(map)