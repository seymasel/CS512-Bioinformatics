# -*- coding: utf-8 -*-
"""HW3_NurverSeyma_Sel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QAnFpIzVPwLSVumfofdIOiEYX_-jRuty

Nurver Seyma Sel 27927 hw3
https://colab.research.google.com/drive/1QAnFpIzVPwLSVumfofdIOiEYX_-jRuty?usp=sharing
"""

#StringCompositionProblem
def StringComposition(Text,k):
  KMers = []
  for i in range(len(Text)-k+1):
    currKmer = Text[i:i+k]
    KMers.append(currKmer)
  KMers.sort()
  return KMers

StringComposition("TATGGGGTGC",3)

#OverlapGraphProblem
def OverlapGraph(KMers):
  overlapArr = []
  for i in range(len(KMers)):
    for j in range(len(KMers)):
      if i != j and KMers[i][1:] == KMers[j][0:-1]:
        overlapArr.append(KMers[i] + ' -> ' + KMers[j])
  return overlapArr
  
OverlapGraph(["ATG","TGA","CTA","ACT","GAC"])

#DeBruijnGraphProblem
def DeBruijnGraph(KMers):
  deBruijnDict = {}
  for i in KMers:
    if i[:-1]  in deBruijnDict.keys():
      deBruijnDict[i[:-1]] = deBruijnDict[i[:-1]]+','+ i[1:]
    else:
      deBruijnDict[i[:-1]] = i[1:]
  return deBruijnDict
  
DeBruijnGraph(["ATG","TGA","ACT","GAC","GAC","GAC"])

def AdjacencyListFormat(graph):
  arr =[]
  for key in graph:
     arr.append(key +'->'+graph[key])
  arr.sort()
  return arr
  
deBruijn = DeBruijnGraph(["ATG","TGA","ACT","GAC","GAC","GAC"]) 
adjList = AdjacencyListFormat(deBruijn)
print(adjList)

#EulerianCycleProblem
#in de bruijn graph strongly connected and balanced(in=out degrees are equal) there is euclerian cycle.
def EulerianCycle(graph):

  if(len(graph.values())==len(graph.keys())):
    print("There can be euclerian cycle")
  return graph

deBruijn = DeBruijnGraph(["CTG","TGA","GAC","ACT"]) 
EulerianCycle(deBruijn)