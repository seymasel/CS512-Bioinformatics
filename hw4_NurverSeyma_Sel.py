# -*- coding: utf-8 -*-
"""HW4_NurverSeyma_Sel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pDrVmOP5kT7cT0zljXV8KQfiPUhr5mJV

Nurver Seyma Sel 27927 hw4
https://colab.research.google.com/drive/1pDrVmOP5kT7cT0zljXV8KQfiPUhr5mJV?usp=sharing
"""

# #PatternTranslationProblem
codonstable = { "UUU": "F", "UUC": "F", "UUA": "L", "UUG": "L",
           "CUU": "L", "CUC": "L", "CUA": "L", "CUG": "L",
           "AUU": "I", "AUC": "I", "AUA": "I", "AUG": "M",
           "GUU": "V", "GUC": "V", "GUA": "V", "GUG": "V",
           "UCU": "S", "UCC": "S", "UCA": "S", "UCG": "S",
           "CCU": "P", "CCC": "P", "CCA": "P", "CCG": "P",
           "ACU": "T", "ACC": "T", "ACA": "T", "ACG": "T",
           "GCU": "A", "GCC": "A", "GCA": "A", "GCG": "A",
           "UAU": "Y", "UAC": "Y", "CAU": "H", "CAC": "H",
           "CAA": "Q", "CAG": "Q", "AAU": "N", "AAC": "N",
           "AAA": "K", "AAG": "K", "GAU": "D", "GAC": "D",
           "GAA": "E", "GAG": "E", "UGU": "C", "UGC": "C",
           "UGG": "W", "CGU": "R", "CGC": "R", "CGA": "R",
           "CGG": "R", "AGU": "S", "AGC": "S", "AGA": "R",
           "AGG": "R", "GGU": "G", "GGC": "G", "GGA": "G", "GGG": "G"}
stopcodons = ["UGA", "UAA", "UAG"]
def PatternTranslation(rna,codons):
  protein = ""
  for i in range(0, len(codons), 3):
    if(rna[i:i+3] in stopcodons):
      break
    if(i+3 >len(rna)):
      break
    amino_acid = codons[rna[i:i+3]]
    protein += amino_acid
    
  return protein

PatternTranslation("UGGACUCCCGUGUUUUAAGAA",codonstable)

#GeneratingTheoreticalSpectrumProblem
def GenerationTheorericalSpectrum(peptide): 
  essentialmass = {"G":57, "A":71, "S":87, "P":97, "V":99, "T":101, "C":103, "I":113, "L":113, "N":114, "D":115, "K":128, "Q":128, "E":129, "M":131, "H":137, "F":147, "R":156, "Y":163, "W":186}
  spectrum = [0] #add zero bcs empty string
  peptidelength = len(peptide)
  cycleVal=essentialmass[peptide[0]]+essentialmass[peptide[peptidelength-1]]

  for i in range(peptidelength):
      prevVal = essentialmass[peptide[i]]
      spectrum.append(prevVal)
      j= i+1
      while j != peptidelength:
          prevVal += essentialmass[peptide[j]]
          j += 1
          spectrum.append(prevVal)
      if peptidelength > 2:
          if i != 0 and i != peptidelength-1:
              temp=cycleVal+essentialmass[peptide[i]]
              spectrum.append(temp)
              
  if peptidelength > 2:
    spectrum.append(cycleVal)
  spectrum.sort()
  return spectrum

GenerationTheorericalSpectrum("NQEL")

#CyclopeptideScoringProblem
import numpy as np
experimental = [0, 99, 113, 114, 128, 227, 257, 299, 355, 356, 370, 371, 484]

def CyclopeptideScoring(peptide, experimentalspectrum):
  theoreticalspectrum = GenerationTheorericalSpectrum(peptide)
  common=np.intersect1d(theoreticalspectrum, experimentalspectrum)
  score = len(common)
  return score

CyclopeptideScoring("NQEL",experimental)