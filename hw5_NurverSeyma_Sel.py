# -*- coding: utf-8 -*-
"""HW5_NurverSeyma_Sel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qEVtPdY2QJXsM3WVH1H3DuwO025et1x3

Nurver Seyma Sel 27927 hw5
https://colab.research.google.com/drive/1qEVtPdY2QJXsM3WVH1H3DuwO025et1x3?usp=sharing
"""

BLOSUM62 = {
    ('W', 'F'): 1, ('L', 'R'): -2, ('S', 'P'): -1, ('V', 'T'): 0, ('Q', 'Q'): 5, ('N', 'A'): -2, ('Z', 'Y'): -2, ('W', 'R'): -3,  
    ('Q', 'A'): -1, ('S', 'D'): 0, ('H', 'H'): 8, ('S', 'H'): -1, ('H', 'D'): -1, ('L', 'N'): -3, ('W', 'A'): -3, ('Y', 'M'): -1,
    ('G', 'R'): -2, ('Y', 'I'): -1, ('Y', 'E'): -2, ('B', 'Y'): -3, ('Y', 'A'): -2, ('V', 'D'): -3, ('B', 'S'): 0, ('Y', 'Y'): 7,
    ('G', 'N'): 0, ('E', 'C'): -4, ('Y', 'Q'): -1, ('Z', 'Z'): 4, ('V', 'A'): 0, ('C', 'C'): 9, ('M', 'R'): -1, ('V', 'E'): -2,
    ('T', 'N'): 0, ('P', 'P'): 7, ('V', 'I'): 3, ('V', 'S'): -2, ('Z', 'P'): -1, ('V', 'M'): 1, ('T', 'F'): -2, ('V', 'Q'): -2,
    ('K', 'K'): 5, ('P', 'D'): -1, ('I', 'H'): -3, ('I', 'D'): -3, ('T', 'R'): -1, ('P', 'L'): -3, ('K', 'G'): -2, ('M', 'N'): -2,
    ('P', 'H'): -2, ('F', 'Q'): -3, ('Z', 'G'): -2, ('X', 'L'): -1, ('T', 'M'): -1, ('Z', 'C'): -3, ('X', 'H'): -1, ('D', 'R'): -2,
    ('B', 'W'): -4, ('X', 'D'): -1, ('Z', 'K'): 1, ('F', 'A'): -2, ('Z', 'W'): -3, ('F', 'E'): -3, ('D', 'N'): 1, ('B', 'K'): 0,
    ('X', 'X'): -1, ('F', 'I'): 0, ('B', 'G'): -1, ('X', 'T'): 0, ('F', 'M'): 0, ('B', 'C'): -3, ('Z', 'I'): -3, ('Z', 'V'): -2,
    ('S', 'S'): 4, ('L', 'Q'): -2, ('W', 'E'): -3, ('Q', 'R'): 1, ('N', 'N'): 6, ('W', 'M'): -1, ('Q', 'C'): -3, ('W', 'I'): -3,
    ('S', 'C'): -1, ('L', 'A'): -1, ('S', 'G'): 0, ('L', 'E'): -3, ('W', 'Q'): -2, ('H', 'G'): -2, ('S', 'K'): 0, ('Q', 'N'): 0,
    ('N', 'R'): 0, ('H', 'C'): -3, ('Y', 'N'): -2, ('G', 'Q'): -2, ('Y', 'F'): 3, ('C', 'A'): 0, ('V', 'L'): 1, ('G', 'E'): -2,
    ('G', 'A'): 0, ('K', 'R'): 2, ('E', 'D'): 2, ('Y', 'R'): -2, ('M', 'Q'): 0, ('T', 'I'): -1, ('C', 'D'): -3, ('V', 'F'): -1,
    ('T', 'A'): 0, ('T', 'P'): -1, ('B', 'P'): -2, ('T', 'E'): -1,('V', 'N'): -3, ('P', 'G'): -2, ('M', 'A'): -1, ('K', 'H'): -1,
    ('V', 'R'): -3, ('P', 'C'): -3, ('M', 'E'): -2, ('K', 'L'): -2,('V', 'V'): 4,('M', 'I'): 1,
    ('T', 'Q'): -1, ('I', 'G'): -4, ('P', 'K'): -1, ('M', 'M'): 5, ('K', 'D'): -1, ('I', 'C'): -1,
    ('Z', 'D'): 1, ('F', 'R'): -3, ('X', 'K'): -1, ('Q', 'D'): 0, ('X', 'G'): -1, ('Z', 'L'): -3, ('X', 'C'): -2, ('Z', 'H'): 0,
    ('B', 'L'): -4, ('B', 'H'): 0, ('F', 'F'): 6, ('X', 'W'): -2, ('B', 'D'): 4, ('D', 'A'): -2, ('S', 'L'): -2, ('X', 'S'): 0,
    ('F', 'N'): -3, ('S', 'R'): -1, ('W', 'D'): -4, ('V', 'Y'): -1, ('W', 'L'): -2, ('H', 'R'): 0, ('W', 'H'): -2, ('H', 'N'): 1,
    ('W', 'T'): -2, ('T', 'T'): 5, ('S', 'F'): -2, ('W', 'P'): -4, ('L', 'D'): -4, ('B', 'I'): -3, ('L', 'H'): -3, ('S', 'N'): 1,
    ('B', 'T'): -1, ('L', 'L'): 4, ('Y', 'K'): -2, ('E', 'Q'): 2, ('Y', 'G'): -3, ('Z', 'S'): 0, ('Y', 'C'): -2, ('G', 'D'): -1,
    ('B', 'V'): -3, ('E', 'A'): -1, ('Y', 'W'): 2, ('E', 'E'): 5, ('Y', 'S'): -2, ('C', 'N'): -3, ('V', 'C'): -1, ('T', 'H'): -2,
    ('P', 'R'): -2, ('V', 'G'): -3, ('T', 'L'): -1, ('V', 'K'): -2, ('K', 'Q'): 1, ('R', 'A'): -1, ('I', 'R'): -3, ('T', 'D'): -1,
    ('P', 'F'): -4, ('I', 'N'): -3, ('K', 'I'): -3, ('M', 'D'): -3, ('V', 'W'): -3, ('W', 'W'): 11, ('M', 'H'): -2, ('P', 'N'): -2,
    ('K', 'A'): -1, ('M', 'L'): 2, ('K', 'E'): 1, ('Z', 'E'): 4, ('X', 'N'): -1, ('Z', 'A'): -1, ('Z', 'M'): -1, ('X', 'F'): -1,
    ('K', 'C'): -3, ('B', 'Q'): 0, ('X', 'B'): -1, ('B', 'M'): -3, ('F', 'C'): -2, ('Z', 'Q'): 3, ('X', 'Z'): -1, ('F', 'G'): -3,
    ('B', 'E'): 1, ('X', 'V'): -1, ('F', 'K'): -3, ('B', 'A'): -2, ('X', 'R'): -1, ('D', 'D'): 6, ('W', 'G'): -2, ('Z', 'F'): -3,
    ('S', 'Q'): 0, ('W', 'C'): -2, ('W', 'K'): -3, ('H', 'Q'): 0, ('L', 'C'): -1, ('W', 'N'): -4, ('S', 'A'): 1, ('L', 'G'): -4,
    ('W', 'S'): -3, ('S', 'E'): 0, ('H', 'E'): 0, ('S', 'I'): -2, ('H', 'A'): -2, ('S', 'M'): -1, ('Y', 'L'): -1, ('Y', 'H'): 2,
    ('Y', 'D'): -3, ('E', 'R'): 0, ('X', 'P'): -2, ('G', 'G'): 6, ('G', 'C'): -3, ('E', 'N'): 0, ('Y', 'T'): -2, ('Y', 'P'): -3,
    ('T', 'K'): -1, ('A', 'A'): 4, ('P', 'Q'): -1, ('T', 'C'): -1, ('V', 'H'): -3, ('T', 'G'): -2, ('I', 'Q'): -3, ('Z', 'T'): -1,
    ('C', 'R'): -3, ('V', 'P'): -2, ('P', 'E'): -1, ('M', 'C'): -1, ('K', 'N'): 0, ('I', 'I'): 4, ('P', 'A'): -1, ('M', 'G'): -3,
    ('T', 'S'): 1, ('I', 'E'): -3, ('P', 'M'): -2, ('M', 'K'): -1, ('I', 'A'): -1, ('P', 'I'): -3, ('R', 'R'): 5, ('X', 'M'): -1,
    ('L', 'I'): 2, ('X', 'I'): -1, ('Z', 'B'): 1, ('X', 'E'): -1, ('Z', 'N'): 0, ('X', 'A'): 0, ('B', 'R'): -1, ('B', 'N'): 3,
    ('F', 'D'): -3, ('X', 'Y'): -1, ('Z', 'R'): 0, ('F', 'H'): -1, ('B', 'F'): -3, ('F', 'L'): 0, ('X', 'Q'): -1, ('B', 'B'): 4
}

#LongestCommonSubsequenceProblem
def LongestCommonSubsequence(str1, str2):
    len_str1 = len(str1)
    len_str2 = len(str2)
    L = [[0 for x in range(len_str2+1)] for x in range(len_str1+1)]

    for i in range(len_str1+1):
        for j in range(len_str2+1):
            if i == 0 or j == 0:
                L[i][j] = 0
            elif str1[i-1] == str2[j-1]:
                L[i][j] = 1 + L[i-1][j-1] 
            else:
                L[i][j] = max(L[i-1][j], L[i][j-1])

    index = L[len_str1][len_str2]
    lcs = [""] * (index+1)
    lcs[index] = ""
    i = len_str1
    j = len_str2

    while i > 0 and j > 0:
        if str1[i-1] == str2[j-1]:
            lcs[index-1] = str1[i-1]
            i -= 1
            j -= 1
            index -= 1
        elif L[i-1][j] > L[i][j-1]:
            i -= 1
        else:
            j -= 1          
    return lcs


String1 = "ACADBDA"
String2 = "CBDA"
print("String 1 : ", String1)
print("String 2 : ", String2)
print("LCS: " + "".join(LongestCommonSubsequence(String1, String2)))

#GlobalAlignmentProblem
#It usea the BLOSUM62 scoring matrix and indel penalty Ïƒ = 5 taken from ROSALIND.
def GlobalAlignment(str1, str2):
    indel_penalty=5
    str1 = "-" + str1
    str2 = "-" + str2
    str1_len = len(str1)
    str2_len = len(str2)
    aligned_1 = ""
    aligned_2 = ""
    backtrack_matrix = [[None for _ in range(str2_len)] for _ in range(str1_len)]
    score_matrix = [[0 for _ in range(str2_len)] for _ in range(str1_len)]
    

    for i in range(str1_len):
      backtrack_matrix[i][0] = "u"
      score_matrix[i][0] = -indel_penalty * i
      
    for j in range(str2_len):
      backtrack_matrix[0][j] = "l"
      score_matrix[0][j] = -indel_penalty * j
        
    for i in range(1, str1_len):
        for j in range(1, str2_len):
            if (str1[i], str2[j]) in BLOSUM62:
                key = (str1[i], str2[j])
            else:
                key = (str2[j], str1[i])
            score1 = score_matrix[i - 1][j - 1] + BLOSUM62[key]
            score2 = score_matrix[i - 1][j] - indel_penalty
            score3 = score_matrix[i][j - 1] - indel_penalty
            score_matrix[i][j] = max(score1, score2, score3)
            if score_matrix[i][j] == score1:
                backtrack_matrix[i][j] = "d"
            elif score_matrix[i][j] == score2:
                backtrack_matrix[i][j] = "u"
            elif score_matrix[i][j] == score3:
                backtrack_matrix[i][j] = "l"

    i = str1_len - 1
    j = str2_len - 1
    while i != 0 or j != 0:
        direction = backtrack_matrix[i][j]
        if direction == "u":
            aligned_1 = str1[i] + aligned_1
            aligned_2 = "-" + aligned_2
            i -= 1
        elif direction == "d":
            aligned_1 = str1[i] + aligned_1
            aligned_2 = str2[j] + aligned_2
            i -= 1
            j -= 1
        else:
            aligned_1 = "-" + aligned_1
            aligned_2 = str2[j] + aligned_2
            j -= 1

    return aligned_1, aligned_2, score_matrix[str1_len - 1][str2_len - 1]

alignment1, alignment2, score = GlobalAlignment(String1,String2) 
print("Highest-scoring alignment of two strings is:",score)
print("First  alignment is:",alignment1)
print("Second alignment is:",alignment2)

#NumberofBreakpointsProblem
def NumberofBreakpoints(permutation):
  per_len = len(permutation)
  permutation = [0,] + permutation + [per_len+1]
  numberOfBreaks = 0
  for i in range(0, per_len-1):
    if (permutation[i]+1 == permutation[i+1]):
      numberOfBreaks = numberOfBreaks + 1
  return per_len - 1 - numberOfBreaks  
  
print("Number of breakspoints in a given permutation is:", NumberofBreakpoints([+3, +4, +5, -12, -8, -7, -6, +1, +2, +10, +9, -11, +13, +14]))