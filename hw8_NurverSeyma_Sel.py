# -*- coding: utf-8 -*-
"""HW8_NurverSeyma_Sel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11no3vxk6KeEJA7C7fGORPjxPhSanKntQ

Nurver Seyma Sel 27927 hw8
https://colab.research.google.com/drive/11no3vxk6KeEJA7C7fGORPjxPhSanKntQ?usp=sharing
"""

class Trie:
    def __init__(self):
        self.all_nodes = []
        self.all_edges = []
        self.root = self.add_node()

    class node:
        def __init__(self):
            self.label = None
            self.edges = []

    class edge:
        def __init__(self):
            self.from_node = None
            self.target_node = None
            self.label = None
            self.position = None
    
    def add_node(self):
        new_node = Trie.node()
        new_node.label = len(self.all_nodes)
        self.all_nodes.append(new_node)
        return new_node

    def add_edge(self, from_node, target_node, label, position = None):
        new_edge = Trie.edge()
        new_edge.from_node = from_node
        new_edge.target_node = target_node
        new_edge.label = label
        new_edge.position = position
        from_node.edges.append(new_edge)
        self.all_edges.append(new_edge)
        return new_edge

#TrieConstructionProblem
def TrieConstruction(Patterns):
    trie = Trie()
    for Pattern in Patterns:
        currNode = trie.root
        for currSymbol in Pattern:
            for edge in currNode.edges:
                if currSymbol == edge.label:
                    currNode = edge.target_node
                    break
            else:              
                newNode = trie.add_node()
                trie.add_edge(currNode, newNode, currSymbol)
                currNode = newNode
    return trie 

def TrieConstructionPrint(trie):
  for edge in trie.all_edges:
    print(str(edge.from_node.label) + '->' + str(edge.target_node.label) + ':' + edge.label)


Patterns = "ATAGA","ATC","GAT"
TrieConstructionPrint(TrieConstruction(Patterns))

class Tree:
    def __init__(self):
        self.all_nodes = []
        self.all_edges = []
        self.root = self.add_node()

    class node:
        def __init__(self):
            self.label = None
            self.edges = []

    class edge:
        def __init__(self):
            self.from_node = None
            self.target_node = None
            self.position = None
            self.length = None
    
    def add_node(self):
        new_node = Tree.node()
        new_node.label = len(self.all_nodes)
        self.all_nodes.append(new_node)
        return new_node

    def add_edge(self, from_node, target_node, pos, length):
        new_edge = Tree.edge()
        new_edge.from_node = from_node
        new_edge.target_node = target_node
        new_edge.position = pos
        new_edge.length = length
        from_node.edges.append(new_edge)
        self.all_edges.append(new_edge)
        return new_edge

    def edge_labels(self, Text):
        edge_labels = []
        for edge in self.all_edges:
            edge_labels.append(Text[edge.position : edge.position + edge.length])
        return edge_labels


    def construct_suffix_tree(self, trie_node, tree_node, path = []):
        while len(trie_node.edges) == 1:
            trie_edge = trie_node.edges[0]
            path.append(trie_edge)
            trie_node = trie_edge.target_node


        if len(path) != 0:
            new_tree_node = self.add_node()
            _ = self.add_edge(tree_node, new_tree_node, path[0].position, len(path))
            tree_node = new_tree_node

        if len(trie_node.edges) == 0:
            tree_node.indicator = trie_node.indicator
            tree_node.label = trie_node.label
            return None

        for trie_edge in trie_node.edges:
            self.construct_suffix_tree(trie_edge.target_node, tree_node, [trie_edge])

#SuffixTreeConstructionProblem
def SuffixTreeConstruction(Text):
    tree = Tree()
    trie = Trie()
    indicator = '#'
    for i in range(len(Text)):
        currNode = trie.root
        lenText = len(Text)
        for j in range(i, lenText):
            currSymbol = Text[j]
            found_in_edges = False
            for edge in currNode.edges:
                if edge.label == currSymbol:
                    currNode = edge.target_node
                    found_in_edges = True
                    break

            if not found_in_edges:
                newNode = trie.add_node()
                _ = trie.add_edge(currNode, newNode, currSymbol, j)
                currNode = newNode

        if Text[i] == '#':
          indicator = '$' 

        if len(currNode.edges) == 0:
            currNode.label =  str(i)
            currNode.indicator = indicator   

    tree.construct_suffix_tree(trie.root, tree.root)
    result = tree.edge_labels(Text)
    print("\n".join(result))

Text = "ATAAATG$"
SuffixTreeConstruction(Text)